[["index.html", "bookdown for data scientists Chapter 1 bookdown for data scientists", " bookdown for data scientists Chapter 1 bookdown for data scientists This tutorial demonstrates how to use bookdown, an extension of R Markdown, to quickly create interactive data documentation for large datasets with many components and filetypes. Parts of this tutorial are adapted from the bookdown GitHub repository. Questions for live interaction are included as callouts. To do: focus more on what than how "],["prerequisites.html", "1.1 Prerequisites", " 1.1 Prerequisites All software used in this tutorial is available for free. 1.1.1 Software R (3.3.0+) RStudio IDE 9 TeX installed in RStudio To publish online: GitHub GitHub Desktop is an easy introduction to git without requiring command line 1.1.2 Knowledge and experience We assume no experience with YAML or LaTeX. Experience with GitHub, R, and R Markdown are helpful, but not necessary. ## Warning: package &#39;kableExtra&#39; was built under R version 4.2.2 ## Warning: package &#39;dplyr&#39; was built under R version 4.2.3 ## ## Attaching package: &#39;dplyr&#39; ## The following object is masked from &#39;package:kableExtra&#39;: ## ## group_rows ## The following objects are masked from &#39;package:stats&#39;: ## ## filter, lag ## The following objects are masked from &#39;package:base&#39;: ## ## intersect, setdiff, setequal, union ## Warning: package &#39;reactable&#39; was built under R version 4.2.3 ## ## Attaching package: &#39;purrr&#39; ## The following object is masked from &#39;package:magrittr&#39;: ## ## set_names "],["motivation.html", "Chapter 2 Motivation", " Chapter 2 Motivation Why is bookdown useful for us as data scientists and data-adjacent practitioners? Because we can self-publish professional-looking materials that help us to organize things like this: [image of process data project prior to new documentation] Into this: Figure 2.1: Published Process Data Release website You can imagine bookdown as a format designed to combine the features of data tables, textual explanations, and code. The following table summarizes some features of R Markdown and bookdown as compared to familiar alternatives. Features Microsoft Word/Google Docs R Markdown bookdown Multiple editors Yes Yes, via GitHub Yes, via GitHub Formats and runs code snippets No Yes, R code Yes, R code Formats math Yes Yes, with LaTeX Yes, with LaTeX Consistent appearance and formatting Haha Yes Yes PDF accessibility Yes, via tagged PDF export No, requires customization No, requires customization Web accessibility Yes, with some exceptions Yes, via HTML output Yes, via HTML output As stated in the table, I would like to make a note about accessibility: Microsoft Word has a great tool for exporting documents as tagged PDFs, a format that helps users who use screen readers, such as users with visual disabilities. I have found in my personal experience that R Markdown and bookdown require minimal to moderate customization to follow common accessibility practices, such as color contrast and tagging. My company was able to follow 508 requirements. 2.0.1 When not to use bookdown bookdown is suitable mainly for projects in R. For small datasets with simple documentation, using bookdown may be more complex than the task at hand. "],["getting-started.html", "Chapter 3 Getting started", " Chapter 3 Getting started Open RStudio Desktop. Go to File &gt; New Project &gt; New Directory &gt; Book project using bookdown Figure 3.1: File menu in RStudio to create a new project Figure 3.2: Click on Book project using bookdown We now have an example book with all the requisite files. If you want you can simply edit the .Rmd files the same way you would edit a Word document and have a functioning book ready to go, but for data documentation purposes, we will dive a little deeper. "],["adding-interaction.html", "Chapter 4 Adding interaction", " Chapter 4 Adding interaction The bookdown format is compatible with many JavaScript-based packages such as shiny and plotly. This means that we can create books where users can interact with graphs, dashboards, and more! In this section we focus on reactable, a package that allows users to interactively sort and filter tables, similarly to an Excel workbook. kable is the default package used to render tables in bookdown. Here is an example we might use in dataset documentation: Table 4.1: Students with disabilities Population Full Form Block 1 Block 2 Total Students 100 100 100 Total Students with Disabilities (SD) 10 20 10 SD assessed with accommodations 10 20 10 SD assessed without accommodations 0 0 0 reactable is a package in R that uses JavaScript to allow us Excel-like interactivity in codebook documentation. We get the best of both worlds: this is integrated directly into the text, allowing additional notation, and we can also filter, sort, and search long documentation for the variables we are interested in. Here is a working example: "],["integrating-regular-data-updates.html", "Chapter 5 Integrating regular data updates", " Chapter 5 Integrating regular data updates Each update to the underlying data may require us to update text in dozens or hundreds of places regarding sample size, missing values, and more. Integrating code directly into the text allows us to save time and prevent typos by calculating summary statistics from the data itself. It is likely we are not allowed to store data in the same place as the documentation, but uploading a summary .csv or .xlsx data file into our working directory allows us to accomplish the same task. For example, we write the below as inline R code: There are ` r nrow(codebook) ` rows in the codebook. Which renders as: There are 48 rows in the codebook. "],["publishing-as-a-website.html", "Chapter 6 Publishing as a website", " Chapter 6 Publishing as a website bookdown can publish to PDF and EPUB (e-book, such as Kindle). Add: if you don’t want to deal with GitHub, you can output as PDF with the drawback of not being interactive. To host our documentation book on the open web, we can output to gitbook (HTML) so that we can. Notice that we have the benefit of multiple output formats, a good accessibility support. Figure 6.1: Build to gitbook from Build pane In the RStudio IDE Build pane, click on Build Book &gt; bookdown::gitbook. Or, run bookdown::render_book() in the R console. "],["hosting-on-github.html", "6.1 Hosting on GitHub", " 6.1 Hosting on GitHub In order to make our new book public, we are going to host it on a website. Conveniently, GitHub (what is GitHub?) has a built-in function to make any repository into a website. Open a browser and navigate to your repository online. On the Settings tab, under Pages, enable GitHub Pages. Figure 6.2: Deploy GitHub Pages from the docs folder The default name for a bookdown project directory is /book, but GitHub only deploys .html files from inside the main directory of our repository. This repository is set to build .html files to the main directory: if you’re starting from scratch, you can change this setting by editing _bookdown.yml: output_dir: &quot;.&quot; Wait up to 5 minutes for GitHub to publish your website. When you return to the GitHub Pages tab, GitHub should alert you that your website is available at some link similar to your-username.github.io/repository-name. Clicking on that link shows you your new website: Figure 6.3: HTML rendered website welcome page "],["crowd-sourced-edits.html", "Chapter 7 Crowd-sourced edits", " Chapter 7 Crowd-sourced edits Hosting on GitHub gives us more than just a domain to click on. It gives us the ability to solicit feedback in real time from users. Any reader of your website can click on the GitHub icon from your website to access the source code for your book. (Note: for any proprietary source data used in your bookdown, do not commit data files to GitHub. Instead store them locally on your own device.) Figure 7.1: Visit source repository by clicking on top-right GitHub icon Users can now submit an issue via GitHub. Figure 7.2: Issues tab in GitHub "],["appendix-bookdown-filetypes.html", "Chapter 8 Appendix: bookdown filetypes", " Chapter 8 Appendix: bookdown filetypes Here we take an overview of the main filetypes involved in bookdown and what they are used for. Who has worked with .Rmd, .yml, or .css before? What are these filetypes used for? .Rmd bookdown is an extension of the R Markdown format, which is itself an extension of the Markdown markup language. But you don’t need to know Markdown to get started. Toggle the options on the top left of the document window to switch between visual mode, which is similar to a Google Docs or Microsoft Word interface: Figure 8.1: R Markdown in visual mode And source mode: Figure 8.2: R Markdown in source mode See Resources for links to learning R Markdown. .yml These files control meta-structure for the book, as well as PDF appearances, via Pandoc and YAML. (If you have a background in web design, think of YAML like CSS for LaTeX, and of LaTeX as HTML for PDFs.) _bookdown.yml controls high-level settings for the book. Let’s change where the book outputs to: output_dir: &quot;./MY_DIRECTORY&quot; Sometimes we have a lot of YAML code for one specific section, so we separate this out into another file. For example, _output.yml is sourced from _bookdown.yml as an output: YAML tag The output: tag controls detailed options for the book structure, including download formats, sharing buttons, splitting pages by section, where output is located, and appearance. You can source other files here, such as custom CSS files: --- bookdown::gitbook: css: style.css --- .css Cascading Style Sheets (CSS) are used across the web to control aesthetics. This piece is optional, especially for branded materials that may need to align with organizational guidelines. It can also be used to customize your output to handle specific cases. For example, I wanted to make hyperlinks a darker blue for web accessibility reasons. Let’s see an example of how I dealt with this: a:active, a:hover, a:focus, button:active, button:hover, button:focus, li a:active, li a:hover, li a:focus, .active a, .page-inner a { color: #3366cc !important; } Another example is increasing the visible page width for wide content such as tables: /*Expand table width if needed*/ .book .book-body .page-wrapper .page-inner section.normal { overflow: visible !important; } .page-inner, .bookbody { max-width: 90% !important; } .page-inner p, .page-inner h1, .page-inner h2, .page-inner h3, .page-inner h4, .page-inner h5, .page-inner h6, .page-inner li, .page-inner .sourceCode, .page-inner table, .ref, .page-inner .figure, .page-inner .csl-entry { max-width: 800px; margin-left: auto; margin-right: auto; } #codebook table, .wide table { max-width: 98% !important; } "],["further-reading.html", "Chapter 9 Further reading", " Chapter 9 Further reading Bookdown gallery Bookdown reference R Markdown reference Author’s note: Quarto is becoming more popular, and so far appears to be similar to the bookdown/R Markdown workflow with the added benefit of supporting Python and Julia. Users familiar with Jupyter notebooks may find Quarto books more suited to their needs. "],["troubleshooting.html", "9.1 Troubleshooting", " 9.1 Troubleshooting 9.1.1 Operating system differences This reference is developed with Windows in mind. Further content about iOS, Linux welcome. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
